#!/usr/bin/env python

import os
import sys
import re

from skyhookdm_singlecell.util import ArgparseBuilder
from skyhookdm_singlecell.connectors import RadosConnector
from skyhookdm_singlecell.dataformats import SkyhookFileReader, SkyhookFlatbufferMeta

# ------------------------------
# Parse command-line arguments first
argparser = (
    ArgparseBuilder.with_description('Writes data from single-cell arrow files into Ceph')
                   .add_config_file_arg(
                         required=True
                        ,help_str='Path to Ceph config file (default: $HOME/cluster/ceph.conf)'
                        ,default=RadosConnector.default_config
                    )
                   .add_input_file_arg(
                         required=False
                        ,help_str='Path to arrow file (assumed to be gene expression)'
                    )
                   .add_input_dir_arg(
                         required=False
                        ,help_str='Path to root directory of gene expression in MTX format'
                    )
                   .add_data_format_arg(
                         required=False
                        ,help_str='Format of input data. Supports: "flatbuffer" | "arrow"'
                    )
                   .add_ceph_pool_arg(required=True)
                   .add_skyhook_table_arg(required=True)
                   .add_flatbuffer_flag_arg(required=False)
)

parsed_args, parsed_extra_args = argparser.parse_args()


def comparator_filenames(path_to_arrow_file, re_file_id_prefix=r'^(\d+)-'):
    re_match_obj = re.search(
        re_file_id_prefix,
        os.path.basename(path_to_arrow_file)
    )

    if re_match_obj is None:
        sys.exit(f'File naming scheme unrecognized: {path_to_arrow_file}')

    return int(re_match_obj.group(1))


# ------------------------------
# Main Logic

if __name__ == '__main__':

    # ------------------------------
    # Validate invocation

    # use xor, because one and only one of these options should be provided
    print('Which was specified: input_file ({}) or input_dir ({})'.format(
        parsed_args.input_file is not None,
        parsed_args.input_dir is not None
    ))

    if not ((parsed_args.input_file is None) ^ (parsed_args.input_dir is None)):
        argparser._arg_parser.print_help(file=sys.stderr)
        sys.exit('[ERROR] One, and only one, of `--input-dir` or `--input-file` is required.')

    if not os.path.isfile(parsed_args.config_file):
        sys.exit(f'[ERROR] Could not find Ceph configuration file: {parsed_args.config_file}')

    # ------------------------------
    # Determine how to read input files
    paths_to_input_files = []

    if parsed_args.input_file and os.path.isfile(parsed_args.input_file):
        paths_to_input_files = [parsed_args.input_file]

    elif parsed_args.input_dir:
        paths_to_input_files = [
            os.path.join(parsed_args.input_dir, data_partition_file)
            for data_partition_file in os.listdir(parsed_args.input_dir)
            if not (
                   data_partition_file.endswith('cellkey.arrow')
                or data_partition_file.endswith('featurekey.arrow')
            )
        ]

    # ------------------------------
    # Make sure files are in sorted order (temporary hack)
    if len(paths_to_input_files) > 9:
        paths_to_input_files = sorted(paths_to_input_files, key=comparator_filenames)

    # Initialize the cluster handle
    cluster = RadosConnector.connection_for_config(path_to_config=parsed_args.config_file)

    cluster.connect()
    print(f'Connection Information >>>\n{cluster.cluster_info()}\n<<<\n')

    # ------------------------------
    # Load each file, one by one (probably slow)
    for input_id, path_to_input_file in enumerate(paths_to_input_files):
        binary_data = None

        if parsed_args.data_format == 'arrow' and path_to_input_file.endswith('.arrow'):
            binary_data = SkyhookFileReader.read_data_file_as_binary(path_to_input_file)

            if parsed_args.flag_use_wrapper:
                binary_data = SkyhookFlatbufferMeta.binary_from_arrow_binary(binary_data)

        elif parsed_args.data_format != 'arrow':
            sys.exit('Currently only "arrow" data format is supported')

        if binary_data is None:
            sys.exit('No binary data was parsed')

        # Get an ioctx for a pool and write the data
        binary_data_len = len(binary_data).to_bytes(4, byteorder='little')
        with cluster.context_for_pool(parsed_args.ceph_pool) as pool_context:
            pool_context.write_data(
                storage_obj_name=f'public.{parsed_args.skyhook_table}.{input_id}',
                storage_obj_data=(binary_data_len + binary_data)
            )

    path_to_cell_metadata = os.path.join(parsed_args.input_dir, '00001-cellkey.arrow')
    path_to_gene_metadata = os.path.join(parsed_args.input_dir, '00001-featurekey.arrow')

    with cluster.context_for_pool(parsed_args.ceph_pool) as pool_context:
        cell_metadata = SkyhookFileReader.read_data_file_as_binary(path_to_cell_metadata)
        gene_metadata = SkyhookFileReader.read_data_file_as_binary(path_to_gene_metadata)

        if parsed_args.flag_use_wrapper:
            cell_metadata_binary = SkyhookFlatbufferMeta.binary_from_arrow_binary(cell_metadata)
            gene_metadata_binary = SkyhookFlatbufferMeta.binary_from_arrow_binary(gene_metadata)

        binary_data_len = len(cell_metadata_binary).to_bytes(4, byteorder='little')
        pool_context.write_data(
            storage_obj_name=f'public.{parsed_args.skyhook_table}.cells',
            storage_obj_data=(binary_data_len + cell_metadata_binary)
        )

        binary_data_len = len(gene_metadata_binary).to_bytes(4, byteorder='little')
        pool_context.write_data(
            storage_obj_name=f'public.{parsed_args.skyhook_table}.genes',
            storage_obj_data=(binary_data_len + gene_metadata_binary)
        )
