# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Tables

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Table(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTable(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Table()
        x.Init(buf, n + offset)
        return x

    # Table
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Table
    def DataFormatType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Table
    def SkyhookVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Table
    def DataStructureVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Table
    def DataSchemaVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Table
    def DataSchema(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Table
    def DbSchema(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Table
    def TableName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Table
    def DeleteVector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Table
    def DeleteVectorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Table
    def DeleteVectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Table
    def DeleteVectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Table
    def Rows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Tables.Record import Record
            obj = Record()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Table
    def RowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Table
    def RowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Table
    def Nrows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TableStart(builder): builder.StartObject(10)
def TableAddDataFormatType(builder, dataFormatType): builder.PrependInt32Slot(0, dataFormatType, 0)
def TableAddSkyhookVersion(builder, skyhookVersion): builder.PrependInt32Slot(1, skyhookVersion, 0)
def TableAddDataStructureVersion(builder, dataStructureVersion): builder.PrependInt32Slot(2, dataStructureVersion, 0)
def TableAddDataSchemaVersion(builder, dataSchemaVersion): builder.PrependInt32Slot(3, dataSchemaVersion, 0)
def TableAddDataSchema(builder, dataSchema): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dataSchema), 0)
def TableAddDbSchema(builder, dbSchema): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dbSchema), 0)
def TableAddTableName(builder, tableName): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tableName), 0)
def TableAddDeleteVector(builder, deleteVector): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(deleteVector), 0)
def TableStartDeleteVectorVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TableAddRows(builder, rows): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rows), 0)
def TableStartRowsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TableAddNrows(builder, nrows): builder.PrependUint32Slot(9, nrows, 0)
def TableEnd(builder): return builder.EndObject()
